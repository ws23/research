<project name="fmj" default="all" basedir=".">
	<property name="project.name" value="fmj"/>
	<property name="src" location="src"/>
	<property name="javac.out" location="build/classes" />
	<property name="cpp.out" location="build/obj" />
	<property name="jar.out" location="build/jars" />
	<property name="javadoc.out" location="build/doc" />
	<property name="dist" location="build/dist/fmj" />
	<property name="dist-zip" location="build/dist/zip" />

	<property name="directx.sdk" location="C:\\Program Files\\Microsoft DirectX 9.0 SDK (February 2005)" />
	<property name="directshow.sdk" location="${directx.sdk}\\Extras\\DirectShow" />
	<property name="java.sdk" location="${JDK}" />
	<!--property name="qtjava.dir" location="C:\\DevLibsMin\\qtjava\\"/-->
	<property name="qtjava.dir" location="/home/ken/DevLibsMin/qtjava/"/>
	<property name="retroweaver.home" location="/home/ken/prog/retroweaver-2.0"/>
	<property file="fmj.larsontechnologies.com.properties"/>
	<target name="all" depends="build,jar,build-test,javadoc" />

	
	<target name="help">
		<!-- TODO list the helpful targets -->
	</target>


	<target name="build" description="compile java source">
		<mkdir dir="${javac.out}" />
		<javac debug="true" optimize="true" destdir="${javac.out}">
			<compilerarg line="-source 1.5" />
			<src path="${src}"/>
			<src path="src.utils"/>
			<src path="src.stubs"/>
			<src path="src.ejmf"/>
			<src path="src.capture"/>
			<src path="src.rtp"/>
			<src path="src.gst"/>
			<src path="src.sip-communicator"/>
			<src path="src.ffmpeg-java"/>
			<src path="src.theora-java"/>
			<classpath>
				<pathelement location="lib/jdom.jar" />
				<pathelement location="lib/lti-civil-no_s_w_t.jar" />
				<pathelement location="lib/jl1.0.jar" />
				<pathelement location="lib/tritonus_share.jar" />
				<pathelement location="lib/mp3spi1.9.4.jar" />
				<pathelement location="lib/jorbis-0.0.15.jar" />
				<pathelement location="lib/jogg-0.0.7.jar" />
				<pathelement location="lib/vorbisspi1.0.2.jar" />
				<pathelement location="lib/gstreamer-java.jar" />
				<pathelement location="lib/jna.jar" />
				<pathelement location="lib/jspeex.jar" />
				<pathelement location="lib/ffmpeg-java.jar" />
				<pathelement location="lib/theora-java.jar" />
				<pathelement location="lib/jheora-patch.jar" />
			</classpath>

		</javac>
		
		<copy todir="${javac.out}/net/sf/fmj/ui/images">
			<fileset dir="${src}/net/sf/fmj/ui/images" includes="*.gif"/>
			<fileset dir="${src}/net/sf/fmj/ui/images" includes="*.png"/>
		</copy>
		
		<mkdir dir="${javac.out}/net/sf/fmj/ejmf/toolkit/gui/controls/skins/two/resources"/>
		<copy todir="${javac.out}/net/sf/fmj/ejmf/toolkit/gui/controls/skins/two/resources">
			<fileset dir="src.ejmf/net/sf/fmj/ejmf/toolkit/gui/controls/skins/two/resources" includes="*.png"/>
		</copy>
	</target>


	<!-- Create a a jar of FMJ, excluding test classes -->
	<target name="jar">
		<mkdir dir="${jar.out}" />
		<mkdir dir="build/classes.ds" />
		<mkdir dir="build/classes.qt" />        
		<jar jarfile="${jar.out}/fmj.jar">
			<fileset dir="${javac.out}">
				<exclude name="net/sf/fmj/test/*" />
			</fileset>
			<fileset dir="${javac.out}.ds">
			</fileset>
			<fileset dir="${javac.out}.qt">
			</fileset>
		</jar>
		
		<!-- for playback-only applet, no native stuff. -->
		<jar jarfile="${jar.out}/fmj-applet.jar">
			<fileset dir="${javac.out}">
				<exclude name="net/sf/fmj/test/**" />
				<exclude name="net/sf/fmj/capture/**" />
				<exclude name="net/sf/fmj/media/protocol/civil/**" />
				<exclude name="net/sf/fmj/gst/**" />
				<exclude name="net/sf/fmj/ffmpeg_java/**" />
				<exclude name="net/sf/fmj/theora_java/NativeOggParser" />
			</fileset>
			
		</jar>
		
		<!-- jar, excluding classes that are in JMF.  Resulting jar is to be used with JMF. -->
		<jar jarfile="${jar.out}/fmj-nojmf.jar">
			<fileset dir="${javac.out}">
				<exclude name="net/sf/fmj/test/*" />
				
				<exclude name="javax/**"/>
				<exclude name="com/ibm/**"/>
				<exclude name="com/sun/**"/>
			</fileset>
			<fileset dir="${javac.out}.ds">
			</fileset>
			<fileset dir="${javac.out}.qt">
			</fileset>

		</jar>
		
	</target>
	
	<!-- java -cp release\retroweaver-<version>.jar;lib\asm-2.2.jar;lib\asm-commons-2.2.jar net.sourceforge.retroweaver.Weaver -jar input.jar output.jar -->
		
	<target name="retroweave-fmj-applet-jar">
		<mkdir dir="${jar.out}/1_4"/>
		
		<java classname="net.sourceforge.retroweaver.Weaver">
			<arg line="-jar ${jar.out}/fmj-applet.jar ${jar.out}/1_4/fmj-applet.jar"/>
			<classpath>
				<pathelement location="${retroweaver.home}/release/retroweaver-all-2.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-3.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-commons-3.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-util-3.0.jar"/>
			</classpath>
		</java>
		
		<java classname="net.sourceforge.retroweaver.Weaver">
			<arg line="-jar lib/theora-java.jar ${jar.out}/1_4/theora-java.jar"/>
			<classpath>
				<pathelement location="${retroweaver.home}/release/retroweaver-all-2.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-3.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-commons-3.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-util-3.0.jar"/>
			</classpath>
		</java>
		
		<java classname="net.sourceforge.retroweaver.Weaver">
			<arg line="-jar lib/jheora-patch.jar ${jar.out}/1_4/jheora-patch.jar"/>
			<classpath>
				<pathelement location="${retroweaver.home}/release/retroweaver-all-2.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-3.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-commons-3.0.jar"/>
				<pathelement location="${retroweaver.home}/lib/asm-util-3.0.jar"/>
			</classpath>
		</java>
	</target>



	<!-- clean the slate -->
	<target name="clean">
		<delete dir="build/classes"/>
		<delete dir="build/classes.ds"/>
		<delete dir="build/classes.qt"/>
		<delete dir="build/dist"/>
		<delete dir="build/doc"/>
		<delete dir="build/jars"/>
	</target>

	
	<!-- build the test classes -->
	<target name="build-test" depends="build">
		<mkdir dir="${javac.out}.test"/>
		<javac debug="true" optimize="true" destdir="${javac.out}.test">
			<src path="src.test"/>
			<src path="src.sunibmreplace"/>
			<compilerarg line="-source 1.5" />
			<classpath>
				<pathelement location="${javac.out}" />
				<pathelement location="lib/jdom.jar" />
				<pathelement location="lib/junit.jar" />
				<pathelement location="lib/lti-civil-no_s_w_t.jar" />
			</classpath>
		</javac>
	</target>


	<!-- run the tests -->
	<target name="run-tests" description="run unit tests"  depends="build-test">
		<junit printsummary="yes" dir="." showoutput="yes" fork="yes" haltonfailure="yes">
			<formatter type="plain"/>
			<test name="net.sf.fmj.test.compat.AllCompatabilityTests"/>
			<test name="net.sf.fmj.test.functional.AllFunctionalTests"/>
			<test name="net.sf.fmj.test.misc.AllMiscTests"/>
						
			<classpath>
				<pathelement location="${javac.out}.test" />
				<pathelement location="${javac.out}" />
				<pathelement location="lib/jdom.jar" />
				<pathelement location="lib/junit.jar" />
				<pathelement location="lib/lti-civil-no_s_w_t.jar" />
				<pathelement location="lib/jl1.0.jar" />
				<pathelement location="lib/tritonus_share.jar" />
				<pathelement location="lib/mp3spi1.9.4.jar" />
				<pathelement location="lib/jorbis-0.0.15.jar" />
				<pathelement location="lib/jogg-0.0.7.jar" />
				<pathelement location="lib/vorbisspi1.0.2.jar" />
								
			</classpath>
		</junit>
		
		
	</target>	
	

	<!-- run the registry editor GUI -->
	<target name="run-registry" depends="build">
		<java classname="net.sf.fmj.ui.registry.RegistryEditorPanel" fork="true">
			<classpath>
				<pathelement location="${javac.out}" />
				<pathelement location="lib/jdom.jar" />
				<pathelement location="lib/lti-civil-no_s_w_t.jar" />
				<pathelement location="lib/jl1.0.jar" />
				<pathelement location="lib/tritonus_share.jar" />
				<pathelement location="lib/mp3spi1.9.4.jar" />
				<pathelement location="lib/jorbis-0.0.15.jar" />
				<pathelement location="lib/jogg-0.0.7.jar" />
				<pathelement location="lib/vorbisspi1.0.2.jar" />
				<pathelement location="lib/gstreamer-java.jar" />
				<pathelement location="lib/jna.jar" />
				<pathelement location="lib/jspeex.jar" />
				<pathelement location="lib/ffmpeg-java.jar" />
				<pathelement location="lib/theora-java.jar" />
				<pathelement location="lib/jheora-patch.jar" />
			</classpath>
		</java>
	</target>
	
	
	<target name="javadoc" depends="build">
		<javadoc destdir="${javadoc.out}" packagenames="*" overview="${src}/overview.html" verbose="no">
			<arg value="-quiet"/>
		    <fileset dir="${src}"/>
			<fileset dir="src.utils"/>
			<fileset dir="src.stubs"/>
			<fileset dir="src.ejmf"/>
			<fileset dir="src.capture"/>
			<fileset dir="src.rtp"/>
			<fileset dir="src.gst"/>
			<fileset dir="src.sip-communicator"/>		
			<fileset dir="src.ffmpeg-java"/>
			<fileset dir="src.theora-java"/>
			<classpath>
				<pathelement location="${javac.out}" />
				<pathelement location="lib/jdom.jar" />
				<pathelement location="lib/junit.jar" />
				<pathelement location="lib/lti-civil-no_s_w_t.jar" />
				<pathelement location="lib/jl1.0.jar" />
				<pathelement location="lib/tritonus_share.jar" />
				<pathelement location="lib/mp3spi1.9.4.jar" />
				<pathelement location="lib/jorbis-0.0.15.jar" />
				<pathelement location="lib/jogg-0.0.7.jar" />
				<pathelement location="lib/vorbisspi1.0.2.jar" />
				<pathelement location="lib/gstreamer-java.jar" />
				<pathelement location="lib/jna.jar" />
				<pathelement location="lib/jspeex.jar" />
				<pathelement location="lib/ffmpeg-java.jar" />
				<pathelement location="lib/theora-java.jar" />
				<pathelement location="lib/jheora-patch.jar" />
			</classpath>
		</javadoc>
	</target>

	
	<target name="timestamp">
		<tstamp />
		<echo message="build=${DSTAMP}-${TSTAMP}"/>
	</target>
			
	<target name="dist" description="Creates the packaged distribution" depends="timestamp,clean,build,build-ds,build-qt,javadoc,jar">
		
		<mkdir dir="${dist}/.." />
		<mkdir dir="${dist}" />
		<copy todir="${dist}" file="README"/>
		<copy todir="${dist}" file="LICENSE"/>
		<copy todir="${dist}" file="version-history.txt"/>
		<copy todir="${dist}" file="logging.properties"/>
		<copy todir="${dist}" file="build/jars/fmj.jar"/>
		<copy todir="${dist}" file="build/jars/fmj-applet.jar"/>
		<copy todir="${dist}" file="build/jars/fmj-nojmf.jar"/>
		
		<!-- add build info to jars: -->
		<echo message="build=${DSTAMP}-${TSTAMP}${line.separator}"  append="false" file="build/fmj.build.properties"/>

		<jar update="true" jarfile="${dist}/fmj.jar">
			<fileset file="build/fmj.build.properties"/>
		</jar>
		<jar update="true" jarfile="${dist}/fmj-applet.jar">
			<fileset file="build/fmj.build.properties"/>
		</jar>
		<jar update="true" jarfile="${dist}/fmj-nojmf.jar">
			<fileset file="build/fmj.build.properties"/>
		</jar>
		
		<mkdir dir="${dist}/lib" />
		<copy todir="${dist}/lib" file="lib/jdom.jar"/>
		<copy todir="${dist}/lib" file="lib/lti-civil-no_s_w_t.jar"/>
		<copy todir="${dist}/lib" file="lib/jl1.0.jar" />
		<copy todir="${dist}/lib" file="lib/tritonus_share.jar" />
		<copy todir="${dist}/lib" file="lib/mp3spi1.9.4.jar" />
		<copy todir="${dist}/lib" file="lib/jorbis-0.0.15.jar" />
		<copy todir="${dist}/lib" file="lib/jogg-0.0.7.jar" />
		<copy todir="${dist}/lib" file="lib/vorbisspi1.0.2.jar" />
		<copy todir="${dist}/lib" file="lib/gstreamer-java.jar" />
		<copy todir="${dist}/lib" file="lib/jna.jar" />
		<copy todir="${dist}/lib" file="lib/jspeex.jar" />
		<copy todir="${dist}/lib" file="lib/ffmpeg-java.jar" />
		<copy todir="${dist}/lib" file="lib/theora-java.jar" />
		<copy todir="${dist}/lib" file="lib/jheora-patch.jar" />
		
		
		<mkdir dir="${dist}/native" />
		<mkdir dir="${dist}/native/linux-amd64" />
		<mkdir dir="${dist}/native/linux-x86" />
		<mkdir dir="${dist}/native/win32-x86" />
		<copy todir="${dist}/native/linux-amd64" file="nativelib/linux-amd64/libcivil.so"/>
		<copy todir="${dist}/native/linux-x86" file="nativelib/linux-x86/libcivil.so"/>
		<copy todir="${dist}/native/win32-x86" file="nativelib/win32-x86/civil.dll"/>
		<!-- no native mac library since it uses quicktime -->

		<copy todir="${dist}/native/win32-x86" file="nativelib/win32-x86/jdshow.dll"/>
		
		
		<!-- sh/batch files -->
		
		<copy tofile="${dist}/fmjstudio-linux-amd64.sh" file="sh/linux/amd64/fmjstudio.sh" />
		<copy tofile="${dist}/fmjregistry-linux-amd64.sh" file="sh/linux/amd64/fmjregistry.sh" />
		
		<copy tofile="${dist}/fmjstudio-linux-x86.sh" file="sh/linux/x86/fmjstudio.sh" />
		<copy tofile="${dist}/fmjregistry-linux-x86.sh" file="sh/linux/x86/fmjregistry.sh" />
		
		<copy tofile="${dist}/fmjstudio.bat" file="sh/win32/x86/fmjstudio.bat" />
		<copy tofile="${dist}/fmjregistry.bat" file="sh/win32/x86/fmjregistry.bat" />
	
		<copy tofile="${dist}/fmjstudio-macosx-universal.sh" file="sh/macosx/universal/fmjstudio.sh" />
		<copy tofile="${dist}/fmjregistry-macosx-universal.sh" file="sh/macosx/universal/fmjregistry.sh" />
		
		
		
		<chmod perm="ugo+x">
			<fileset dir="${dist}" includes="*.sh" />
		</chmod>
		
		<mkdir dir="${dist}/doc"/>
		<mkdir dir="${dist}/doc/javadoc"/>
		<copy todir="${dist}/doc/javadoc">
			<fileset dir="build/doc"/>
		</copy>
		
		<mkdir dir="${dist}/doc/general"/>
		<copy todir="${dist}/doc/general">
			<fileset dir="." includes="*.html"/>
			<fileset dir="." includes="*.css"/>
		</copy>
		
		<!-- source -->
		<mkdir dir="${dist}/src"/>
		<copy todir="${dist}/src"><fileset dir="${src}" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.utils"/>
		<copy todir="${dist}/src.utils"><fileset dir="src.utils" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.capture"/>
		<copy todir="${dist}/src.capture"><fileset dir="src.capture" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.ejmf"/>
		<copy todir="${dist}/src.ejmf"><fileset dir="src.ejmf" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.gst"/>
		<copy todir="${dist}/src.gst"><fileset dir="src.gst" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.sip-communicator"/>
		<copy todir="${dist}/src.sip-communicator"><fileset dir="src.sip-communicator" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.examples.rtp"/>
		<copy todir="${dist}/src.examples.rtp"><fileset dir="src.examples.rtp" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.ffmpeg-java"/>
		<copy todir="${dist}/src.ffmpeg-java"><fileset dir="src.ffmpeg-java" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.theora-java"/>
		<copy todir="${dist}/src.theora-java"><fileset dir="src.theora-java" excludes="**/CVS"/></copy>
			
		<mkdir dir="${dist}/src.rtp"/>
		<copy todir="${dist}/src.rtp"><fileset dir="src.rtp" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.stubs"/>
		<copy todir="${dist}/src.stubs"><fileset dir="src.stubs" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.ds"/>
		<copy todir="${dist}/src.ds"><fileset dir="src.ds" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.test"/>
		<copy todir="${dist}/src.test"><fileset dir="src.test" excludes="**/CVS"/></copy>

		<mkdir dir="${dist}/src.qt"/>
		<copy todir="${dist}/src.qt"><fileset dir="src.qt" excludes="**/CVS"/></copy>

		<copy todir="${dist}" file="build.xml"/>
			
		<!-- end source -->
		
		<mkdir dir="${dist}/applet.example"/>
		<copy todir="${dist}/applet.example"><fileset dir="applet.example" excludes="**/CVS"/></copy>

		
		
		<mkdir dir="${dist}/samplemedia"/>
		<copy todir="${dist}/samplemedia">
			<fileset dir="samplemedia"/>
		</copy>
			
		<!-- zip/tar: -->
		
		<delete dir="${dist-zip}" />
		<mkdir dir="${dist-zip}" />
		
		<zip zipfile="${dist-zip}/fmj-${DSTAMP}-${TSTAMP}.zip">
     		<zipfileset dir="${dist}">
       		</zipfileset>
		</zip>
		
		<tar longfile="gnu" destfile="${dist-zip}/fmj-${DSTAMP}-${TSTAMP}.tar.gz" compression="gzip">
 			  <tarfileset dir="${dist}/.." mode="755">
 			    <include name="fmj/*.sh"/>
 			  </tarfileset>
			  <tarfileset dir="${dist}/..">
 			    <include name="fmj/**"/>
 			    <exclude name="fmj/*.sh"/>
 			  </tarfileset>			
		</tar>
 			  	
	</target>
	
	<!-- requires commons-net.jar -->
	<target name="sf-upload" description="upload zipped build to sourcforge">
		  <ftp server="upload.sourceforge.net"
		       remotedir="incoming"
		       userid="anonymous"
		       password=""
		       depends="no"
		  	   binary="yes">
		    <fileset dir="${dist-zip}"/>
		  </ftp>
	</target>
	
	<!-- requires commons-net.jar -->
	<target name="lti-ftp-upload" description="upload applets/media to fmj.larsontechnologies.com">
		  
		  <ftp server="www.larsontechnologies.com"
		       remotedir="fmj/applet.example"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset dir="applet.example"/>
		  </ftp>
		  	
		  <ftp server="www.larsontechnologies.com"
		       remotedir="fmj"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset file="build/jars/fmj-applet.jar"/>
		  </ftp>
		
		  <!--ftp server="www.larsontechnologies.com"
		       remotedir="fmj"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset dir="website.lti"/>
		  </ftp-->
		  <!-- uncomment these when libraries or media change - this is slow -->
		  <!--ftp server="www.larsontechnologies.com"
		       remotedir="fmj/lib"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset dir="lib"/>
		  </ftp>
		  <ftp server="www.larsontechnologies.com"
		       remotedir="fmj/samplemedia"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset dir="samplemedia"/>
		  </ftp-->
		
		  <!-- retroweaver jars: -->
		  <!--ftp server="www.larsontechnologies.com"
		       remotedir="fmj"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset file="build/jars/1_4/fmj-applet.jar"/>
		  </ftp>
		  <ftp server="www.larsontechnologies.com"
		       remotedir="fmj/lib"
		       userid="${lti.ftp.user}"
		       password="${lti.ftp.pass}"
		       depends="no"
		  	   binary="yes">
		    <fileset file="build/jars/1_4/theora-java.jar"/>
		  	<fileset file="build/jars/1_4/jheora-patch.jar"/>
		  	<fileset file="${retroweaver.home}/release/retroweaver-rt-2.0.jar"/>
		  </ftp-->
	</target>
		
	
	<!-- DirectShow targets -->
	<target name="build-ds" depends="build">
		<mkdir dir="${javac.out}.ds" />
		<javac debug="true" optimize="true" destdir="${javac.out}.ds">
			<compilerarg line="-source 1.5" />
			<src path="src.ds"/>
			<classpath>
				<pathelement location="${javac.out}" />

			</classpath>

		</javac>

	</target>
	
	<target name="javah-jdshow" depends="build-ds">
		<exec dir="." executable="javah" failonerror="true">
			<arg line="-d src.ds/native -classpath ${javac.out};${javac.out}.ds" />
			<arg line="net.sf.jdshow.Com" />
			<arg line="net.sf.jdshow.IUnknown" />
			<arg line="net.sf.jdshow.IVideoWindow" />
			<arg line="net.sf.jdshow.IGraphBuilder" />
			<arg line="net.sf.jdshow.IMediaControl" />
			<arg line="net.sf.jdshow.JAWTUtils" />
			<arg line="net.sf.jdshow.WindowlessVMR" />
			<arg line="net.sf.jdshow.WindowedRendering" />
			<arg line="net.sf.jdshow.IMediaSeeking" />
			
		</exec>
	</target>
	

		
	<target name="compile-jdshow-dll">
		<echo message="${JDK}"/>
		<mkdir dir="${cpp.out}" />
		<exec dir="${cpp.out}" executable="cl" failonerror="true" >
			<arg line="/LD" />
			<arg line="/GX" />
			<arg line="/o jdshow.dll" />
			<arg line="/I &quot;${java.sdk}/include&quot;" />
			<arg line="/I &quot;${java.sdk}/include/win32&quot;" />
			<arg line="/I &quot;${directshow.sdk}/include&quot;" />
			<arg line="/I &quot;${directx.sdk}/include&quot;" />
			<arg line="-I src.ds/native" />
			
			<arg path="src.ds/native/IMediaSeeking.cpp" />
			<arg path="src.ds/native/WindowedRendering.cpp" />
			<arg path="src.ds/native/WindowlessVMR.cpp" />
			<arg path="src.ds/native/JAWTUtils.cpp" />
			<arg path="src.ds/native/Com.cpp" />
			<arg path="src.ds/native/IGraphBuilder.cpp" />
			<arg path="src.ds/native/IMediaControl.cpp" />
			<arg path="src.ds/native/IUnknown.cpp" />
			<arg path="src.ds/native/IVideoWindow.cpp" />
			<arg path="src.ds/native/Utils.cpp" />
									
			<arg line="&quot;${directshow.sdk}/Lib/x86/quartz.lib&quot;" />
			<arg line="&quot;${directshow.sdk}/Lib/x86/strmiids.lib&quot;" />
			<arg line="ole32.lib" />
			<!-- the following needed for jawt: -->
			<!--arg line="user32.lib" />
			<arg line="gdi32.lib" /-->
			<arg line="&quot;${java.sdk}/lib/jawt.lib&quot;"/>
			
		</exec>
		<!--copy file="${cpp.out}/${project.name}.dll" todir="bin/win32/x86"/-->
		<copy todir="nativelib/win32-x86" file="${cpp.out}/jdshow.dll"/>

	</target>
	
	<!-- Quicktime -->

	<target name="build-qt" depends="build">
		<mkdir dir="${javac.out}.qt" />
		<javac debug="true" optimize="true" destdir="${javac.out}.qt">
			<compilerarg line="-source 1.5" />
			<src path="src.qt"/>
			<classpath>
				<pathelement location="${javac.out}" />
				<pathelement location="${qtjava.dir}/QTJava.zip" />
			</classpath>

		</javac>

	</target>

</project>
